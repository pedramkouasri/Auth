<?php

namespace PedApp\Auth\Tests\Unit;

use App\Models\UserDevice;
use Faker\Factory;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Log;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;


$config  = require_once (__DIR__.'/../../src/Configs/myConfig.php');

class ApiAuthTest extends TestCase
{
    public static $user;

    public function setUp()
    {
        global $config;
        $faker = Factory::create();
        if(empty(self::$user)){
            self::$user = new \stdClass;
            self::$user->uuid = $faker->uuid();
            self::$user->device_type = $faker->randomElement(['android' , 'ios']);
            self::$user->phone = $faker->randomElement($config['supported_phone']).$faker->randomNumber(7);
        }
        dump(self::$user);
        parent::setUp(); // TODO: Change the autogenerated stub
    }
    public function tearDown()
    {

//        UserDevice::where('uuid' , self::$user->uuid)
//            ->where('device_type' , self::$user->device_type)
//            ->first()
//            ->forceDelete();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     */
    public function register_api_test()
    {
        $response = $this->post('/api/v1/auth/register' , [
            'uuid' => self::$user->uuid,
            'deviceType' => self::$user->device_type,
        ]);

//        Log::info(print_r('xx' , true));
    
        $response
            ->assertStatus(Response::HTTP_NO_CONTENT);
        
        $this->assertDatabaseHas('user_devices', [
            'uuid' => self::$user->uuid,
            'device_type' => self::$user->device_type,
            'is_active' => 0,
            'verification_code' => null,
            'api_token' => null
        ]);

    }

    /**
     * @test
     */
    public function verification_api_test(){
        $response = $this->json('POST', '/api/v1/auth/verification', [
            'uuid' => self::$user->uuid,
            'deviceType' => self::$user->device_type,
            'phone' => self::$user->phone,
        ]);

        $response
            ->assertStatus(Response::HTTP_NO_CONTENT);

        $this->assertDatabaseHas('user_devices', [
            'uuid' => self::$user->uuid,
            'device_type' => self::$user->device_type,
            'is_active' => 1,
            'api_token' => null
        ]);
        $this->assertDatabaseMissing('user_devices', [
            'uuid' => self::$user->uuid,
            'device_type' => self::$user->device_type,
            'is_active' => null,
        ]);

        $userDevice = UserDevice::
            where('uuid' , self::$user->uuid)
            ->where('device_type' , self::$user->device_type)
            ->first();
        self::$user = $userDevice;
    }

    /**
     * @test
     */
    public function verification_report_api_test(){
        $response = $this->json('POST', '/api/v1/auth/report-verification', [
            'uuid' => self::$user->uuid,
            'deviceType' => self::$user->device_type,
            'phoneverificationcode' => self::$user->verification_code,
        ]);

        $response
            ->assertStatus(Response::HTTP_OK)
            ->assertJson([
                'apikey' => true
            ]);
        $this->assertDatabaseMissing('user_devices', [
            'uuid' => self::$user->uuid,
            'device_type' => self::$user->device_type,
            'api_token' => null,
        ]);
    }
}
